#!/usr/bin/env python
# -*- encoding: utf-8 -*-

from subprocess import Popen, PIPE
import os, urllib, zipfile, sys, string, argparse
import wget


class ExploitDatabase(object):

    APP_DIR = os.getcwd()
    LOCAL_EXPLOIT_DIR = '/exploit-database/'
    EXPLOITS_DIR = APP_DIR + LOCAL_EXPLOIT_DIR
    EXPLOITS_LIST = EXPLOITS_DIR + 'files.csv'

    EXPLOITS = []

    search = ''
    port = ''
    xplpath = ''
    user_data = []

    def __init__(self):
        pass

    def fetch(self):
        if os.path.exists(self.EXPLOITS_DIR):
            print "Exploit-db already downloaded and UpToDate"
        else:
            page = "http://www.exploit-db.com/archive.tar.bz2"
            print "Downloading ", page
            # urllib.urlretrieve(page, "archive.tar.bz2")
            wget.download(page)

            # Extract exploits and remove original file
            print "Extracting files..."
            zip_file = zipfile.ZipFile("exploit-database-master.zip")
            zip_file.extractall()
            zip_file.close()
            os.rename("exploit-database-master", "exploit-database")
            os.remove("exploit-database-master.zip")
            # os.chmod('files.csv', 0644)
        self.setDate()
        self.load()

    def load(self):
        """ Parse files.csv and load contents into a list """
        import csv

        #Empty exploits list just in case is an update
        self.EXPLOITS = []

        os.chdir(self.EXPLOITS_DIR)
        file = open('files.csv', 'r')
        reader = csv.reader(file, delimiter=',')

        print "\nLoading exploits..."
        for row in reader:
            self.EXPLOITS.append(row)
        self.EXPLOITS.pop(0)
        print "Exploits loaded:", len(self.EXPLOITS)

        os.chdir(self.APP_DIR)

    def setDate(self):
        """ Stores current date on a file """
        import time
        current_date = time.ctime(time.time())
        f = open('last_date.txt', 'w')
        f.write(current_date)
        f.close()
        print "Exploits successfully downloaded on", current_date

    def readDate(self):
        """ Reads last date of exploits download """
        try:
            os.chdir(self.EXPLOITS_DIR)
        except:
            print "Exploits from exploit-db not yet downloaded"
            return False
        f = open('last_date.txt', 'r')
        date = f.read()
        f.close()
        os.chdir(self.APP_DIR)
        return date

    def listExpl(self):
        """ Prints to stdout the exploits available """

        # Print descriptions of each exploit... verbose
        for exploit in self.EXPLOITS:
            print self.LOCAL_EXPLOIT_DIR + exploit[1] + "\t\t" + exploit[2]

    def searchExpl(self):
        """ Search exploits containing the self.search string """

        # Check if self.search has content
        if self.search:
            print "Searching exploit-db for string:", self.search
            for exploit in self.EXPLOITS:
                if exploit[2].__contains__(self.search):
                    print self.LOCAL_EXPLOIT_DIR + exploit[1] + "\t\t" + exploit[2]
        else:
            print "Must specify a pattern to search for"

    def searchPort(self):
        """ Search exploits based on remote port """

        if self.port:
            print "Searching exploit-db for port:", self.port
            for exploit in self.EXPLOITS:
                if exploit[-1] == self.port:
                    print exploit[1] + "\t\t" + exploit[2]
        else:
            print "port variable is empty"
            print "Define the port using for example 'port 22'"

    def showExpl(self):
        """ Prints to stdout selected exploit """

        if self.xplpath:
            f = open(self.xplpath, 'r').read()
            print f
        else:
            print "Select some exploit to show"
            print "Use, for example, 'show ./modules/exploits/gabberbaby/port/22/1787.py'"

    def showHelp(self):
        if os.path.exists(self.EXPLOITS_DIR):
            print
            print "Manage Exploit-DB commands"
            print "--------------------------"
            print
            print "list                         Show list of local exploits. VERY VERBOSE"
            print "search <string>              Search exploits containing the string"
            print "                             Example: to search for postgre exploits"
            print "                             'search Postgre'"
            print "port <port>                 Show exploits afecting a remote port"
            print "                             Define the port using command 'rport 22'"
            print "                             Port must be numeric: 22 intead of SSH"
            print "show                         Show selected exploit source code"
            print "                             Select exploit using xplpath command:"
            print "                             'xplpath path/to/exploit'"
            print

        print "help                         Show this help"
        print "exit                         Exit DDBB"
        print

    def run(self, words):
        # if exploit directory exists, nothing to do, else download db and load it
        self.fetch()

        while 1:
            try:
                res = raw_input("LOCXPL> ")
            except KeyboardInterrupt:
                break
            except EOFError:
                break
            except:
                print "raw_input:", sys.exc_info()[1]

            words = res.split(" ")

            if len(words) == 1 and words[0] == "":
                continue
            elif words[0].lower() == "help":
                self.showHelp()
            elif words[0].lower() == "quit" or words[0].lower() == "exit":
                break
            elif words[0].lower() == "list":
                self.listExpl()
            elif words[0].lower() == "search":
                self.search = string.join(words[1:], ' ')
                self.searchExpl()
            elif words[0].lower() == "port":
                self.port = str(words[1])
                self.searchPort()
            elif words[0].lower() == "show":
                self.xplpath = str(words[1])
                self.showExpl()
            else:
                print "Unknown command or options '" + str(res) + "'"

        return False

    def download(self):
        return Popen('./downloaddb.sh', shell=True, stdout=PIPE).communicate()[0]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='This is a Exploit-db Search app')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()
    exploitdb = ExploitDatabase()
    exploitdb.showHelp()
    exploitdb.run(args)
